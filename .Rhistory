x <- list(foo=1:4, bar = 0.6)
x
x <- list(foo=1:4, bar = 0.6, baz = "hello")
x
x[c(1,3)]
namee <- "foo"
name <- "foo"
x[[name]]
x
x$name
x$foo
x <- list(a = list(10,12,14), b= c(3.14,2.81))
x
x[[c(1,3)]]
pa
x <- c(1,2,NA,4,NA,5)
x
bad <- is.na(x)
bad
x[!bad]
x[bad]
x <- c(1,2,NA,4,NA,5)
y <- c("a","b",NA, "d", NA, "f")
good <- complete.cases(x,y)
good
x <-1:4 ; y <- 6:9
x
y
x+y
x > 3
x > 2
y == 8
x <- matrix(1:4, 2,2) ; y <- matrix(rep(10,4), 2, 2)
x
y
x*y
x/y
x %*%y
?read.table
exit
quit
quit()
library("swirl")
swirl()
5+7
library("quantmod", lib.loc="~/R/win-library/3.1")
library(qu)
install.packages("rfacebook")
require(rfacebook)
install.packages(Rfacebook)
install.packages("Rfacebook")
library(quantmod)
?quantmod
?TTR-package
TTR::
TTR?
?TTR
?TTR::ADX
library(e1071)
install.packages(e1071)
install.packages("e1071")
install.packages(e1071)
example
library("quantmod", lib.loc="~/R/win-library/3.1")
detach("package:quantmod", unload=TRUE)
library("quantmod", lib.loc="~/R/win-library/3.1")
getSymbols
quantmod::getSymbols("^TWII")
quantmod::getSymbols("TWII")
quantmod::getSymbols
quantmod::getSymbols(TWII)
quantmod::getSymbols(^TWII)
getSymbols(^TWII)
getSymbols("^TWII")
TWII[,1]
TWII[1,]
chartSeries(TWII)
chartSeries(TWII[1:100,])
chartSeries?
?chartSeries
chartSeries(tail(TWII,100))
View(TWII)
addBBands()
addBBands
addCCI
addCCI
AddCCI
name(TWII)
?chartSeries
View(TWII)
View(TWII)
name(TWII)
names(TWII)
TWII
TWII
typeof(TWII)
runSum(TWII, n=10,non.unique)
?runSum
runSum(TWII, n=10)
runMEn(TWII[,4])
runMean(TWII[,4])
close_mean <- runMean(TWII[,4])
addTA(close_mean)
addTA(close_mean, on=-1)
addTA(close_mean, on=-1)
addTA
getSymbols("2330.TW")
foxconn <- getSymbols("2317.TW")
View(`2330.TW`)
View(`2317.TW`)
View(`2317.TW`)
timeseries
chartSeries(2317.TW)
chartSeries(tail(2317.TW,100)
TW2317 <- 2317.TW
View(`2317.TW`)
TW2317 <- getSymbols("2317.TW")
chartSeries(TW2317)
stoch
ls
stich(HLC(TWII))
stoch(HLC(TWII))
TWIIStoch <- stoch(HLC(TWII))
TWIIKD <- stoch(HLC(TWII))
view(TWIIKD)
View(TWIIKD)
addSMI()
chartSeries(2317.TW)
library("Rfacebook", lib.loc="~/R/win-library/3.1")
fbOAuth(346090815571593,efb6ee9ae0cbb278c58319462820be66,extended_permissions =TRUE)
fbOAuth(346090815571593,efb6ee9ae0cbb278c58319462820be66,extended_permissions =TRUE)
exampleC()
example()
example
View(x)
View(x)
install.packages(RGoogleAnalytics)
install.packages(RGoogleAnalytics)
install.packages(
"RGoogleAnalytics")
install.packages("RGoogleAnalytics")
load(RGoogleAnalytics)
library("RGoogleAnalytics", lib.loc="~/R/win-library/3.1")
library("lubridate", lib.loc="~/R/win-library/3.1")
install.packages("lubridate")
library("RGoogleAnalytics", lib.loc="~/R/win-library/3.1")
setwd("F:/data science/GA")
client_id <- 837354676365-scduvejop2usnug15j7jri4uh6ue2sd9.apps.googleusercontent.com
client_id <- "837354676365-scduvejop2usnug15j7jri4uh6ue2sd9.apps.googleusercontent.com"
client_scrt <- "o6tN3VDsdP2dkaTz-yqLqXhl"
oath_token <- Auth(client.id=client_id, client.secret = client_scrt)
load("oath_token")
load("oath_token")
save(oath_token, file="oath_token")
load("oath_token")
token <- load("oath_token")
GetProfiles(token)
token
GetProfiles( load("oath_token"))
table.id = "ga:33093633")
client_id <- "837354676365-scduvejop2usnug15j7jri4uh6ue2sd9.apps.googleusercontent.com"
client_scrt <- "o6tN3VDsdP2dkaTz-yqLqXhl"
oath_token <- Auth(client.id=client_id, client.secret = client_scrt)
profile <- GetProfiles(oath_token)
profile
Auth ?
Auth?
?Auth
?load
7
client_scrt <- "o6tN3VDsdP2dkaTz-yqLqXhl"
oath_token <- Auth(client.id=client_id, client.secret = client_scrt)
save(oath_token, file="oath_token")
token <- load("oath_token")
profile <- GetProfiles(token)
save(oath_token, file="oath_token")
token <- load("oath_token")
token
profile <- GetProfiles(token)
profile
token <- load("oath_token")
profile <- GetProfiles(oath_token)
profile <- GetProfiles(token)
token <- load("oath_token")
profile <- GetProfiles(token)
profile
token <- load("oath_token")
profile <- "xxx"
profile <- GetProfiles(token)
profile
RGoogleAnalytics()
RGoogleAnalytics
token <- load("oath_token")
print(token)
profile <- "xxx"
profile <- GetProfiles(token)
profile
ValidateToken(token)
token <- load("oath_token")
print(token)
profile <- "xxx"
ValidateToken(token)
load("oath_token")
profile <- "xxx"
ValidateToken(token)
profile <- GetProfiles(token)
profile
rm(list=ls())
ls()
load("oath_token")
profile <- "xxx"
ValidateToken(token)
profile <- GetProfiles(token)
load("oath_token")
profile <- "xxx"
token <- Auth()
load("oath_token")
profile <- "xxx"
ValidateToken(oath_token)
profile <- GetProfiles(token)
profile
load("oath_token")
profile <- "xxx"
ValidateToken(oath_token)
profile <- GetProfiles(oath_token)
profile
source('F:/data science/GA/gaAuth.R', echo=TRUE)
[GA 網站畫面](gaDashboard01.jpg)
install.packages("RGoogleAnalytics")
library(RGoogleAnalytics)
client.id <- "837354676365-scduvejop2usnug15j7jri4uh6ue2sd9.apps.googleusercontent.com"
client.secret <- "o6tN3VDsdP2dkaTz-yqLqXhl"
oath_token <- Auth(client.id=client.id, client.secret =  client.secret)
save(oath_token, file="oath_token")
load("oath_token")
profile <- "xxx"
profile <- "xxx"
ValidateToken(oath_token) ## 檢查 token 是否有效
profile <- GetProfiles(oath_token) ## 獲取使用者的所有 profiles
profile
ga.table.id <- "ga:79915131" ## Default gaid
chooseTable <- function() ## ???ϥΪ̿??@?? profile ?ӥ?
{
n <- readline(prompt="Enter index ")
return(as.integer(n))
}
selectTable <- chooseTable()
ga.table.id <- paste("ga:",profile$id[selectTable], sep="")
ga.table.id
?RGoogleAnalytics.Init?
?RGoogleAnalytics.Init
?RGoogleAnalytics
?RGoogleAnalytics?
?RGoogleAnalytics
?Init
query.list <- Init(start.date = "2014-01-01",
end.date = "2014-03-15",
dimensions = "ga:userType",
metrics = "ga:users",
max.result = 500,
sort = "ga:users",
filters = NULL,
table.id = ga.table.id)
query.list
ga.query <- QueryBuilder(query.list)
ga.query
ga.query
ga.data <- GetReportData(ga.query, oath_token)
query.list
ga.query <- QueryBuilder(query.list) ##檢查 list 是否有效 並做成Query Object
ga.data <- GetReportData(ga.query, oath_token)
ga.table.id <- "ga:79915131"
## See the chart of Type of visitor
# Init : 將參數做成 List
query.list <- Init(start.date = "2014-01-01",
end.date = "2014-03-15",
dimensions = "ga:userType",
metrics = "ga:users",
max.result = 500,
sort = "ga:users",
filters = NULL,
table.id = ga.table.id)
query.list
ga.query <- QueryBuilder(query.list) ##檢查 list 是否有效 並做成Query Object
ga.data <- GetReportData(ga.query, oath_token)
class(ga.data)
str(ga.data)
userrow <- rownames(ga.data)
userrow <- rownames(ga.data)
barplot(ga.data$users, col = rainbow(14),
names.arg = ga.data$userType,
xlab = usercol[1], ylab = usercol[2])
pie(ga.data$users, labels = ga.data$userType, col = rainbow(14))
query.list <- Init(start.date = "2014-01-01",
end.date = "2014-03-15",
dimensions = "ga:sessionCount",
metrics = "ga:users",
max.result = 500,
sort = "ga:sessionCount",
filters = NULL,
table.id = ga.table.id)
ga.query <- QueryBuilder(query.list)
ga.data <- GetReportData(ga.query, oath_token)
ga.data
userrow <- rownames(ga.data)
barplot(ga.data$users, col = rainbow(14),
names.arg = ga.data$sessionCount,
xlab = usercol[1], ylab = usercol[2])
setwd("F:/data science/machine learning for hackers/ML_for_Hackers/04-Ranking")
source('F:/data science/machine learning for hackers/ML_for_Hackers/04-Ranking/priority_inbox.R', echo=TRUE)
source('F:/data science/machine learning for hackers/ML_for_Hackers/04-Ranking/priority_inbox.R', echo=TRUE)
source('F:/data science/machine learning for hackers/ML_for_Hackers/04-Ranking/priority_inbox.R', echo=TRUE)
warnings()
?melt
?tm.melt
?melt
?tm
?tm
?melt
library("reshape2", lib.loc="~/R/win-library/3.1")
source('F:/data science/machine learning for hackers/ML_for_Hackers/04-Ranking/priority_inbox.R', echo=TRUE)
